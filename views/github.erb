<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Visualization</title>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
  <!-- <script src="//www.google.com/jsapi"></script> -->
  <script src="highcharts.js"></script>
  <script src="chartkick.js"></script>
  <script src="heatmap.js"></script>
  <script src="http://code.highcharts.com/modules/exporting.js"></script>
  <!-- Header libraries for D3 -->
  <script src="http://d3js.org/d3.v3.min.js"></script>
  <script src="d3.layout.cloud.js"></script>
  <script>
    var commits_month_day = <%= @commits_month_day.to_json %>
    console.log(commits_month_day);
    var min_date = commits_month_day.min_date.split('-');
    var max_date = commits_month_day.max_date.split('-');

    $(function() {
        (function(H) {
            var Series = H.Series,
                each = H.each,
                wrap = H.wrap,
                seriesTypes = H.seriesTypes;

            /**
             * Create a hidden canvas to draw the graph on. The contents is later copied over 
             * to an SVG image element.
             */
            Series.prototype.getContext = function() {
                if (!this.canvas) {
                    this.canvas = document.createElement('canvas');
                    this.canvas.setAttribute('width', this.chart.chartWidth);
                    this.canvas.setAttribute('height', this.chart.chartHeight);
                    this.image = this.chart.renderer.image('', 0, 0, this.chart.chartWidth, this.chart.chartHeight).add(this.group);
                    this.ctx = this.canvas.getContext('2d');
                }
                return this.ctx;
            };

            /** 
             * Draw the canvas image inside an SVG image
             */
            Series.prototype.canvasToSVG = function() {
                this.image.attr({
                    href: this.canvas.toDataURL('image/png')
                });
            };

            /**
             * Wrap the drawPoints method to draw the points in canvas instead of the slower SVG,
             * that requires one shape each point.
             */
            H.wrap(H.seriesTypes.heatmap.prototype, 'drawPoints', function(proceed) {

                var ctx = this.getContext();

                if (ctx) {

                    // draw the columns
                    each(this.points, function(point) {
                        var plotY = point.plotY,
                            shapeArgs;

                        if (plotY !== undefined && !isNaN(plotY) && point.y !== null) {
                            shapeArgs = point.shapeArgs;

                            ctx.fillStyle = point.pointAttr[''].fill;
                            ctx.fillRect(shapeArgs.x, shapeArgs.y, shapeArgs.width, shapeArgs.height);
                        }
                    });

                    this.canvasToSVG();

                } else {
                    this.chart.showLoading("Your browser doesn't support HTML5 canvas, <br>please use a modern browser");

                    // Uncomment this to provide low-level (slow) support in oldIE. It will cause script errors on
                    // charts with more than a few thousand points.
                    //proceed.call(this);
                }
            });
            H.seriesTypes.heatmap.prototype.directTouch = false; // Use k-d-tree
        }(Highcharts));

        var start;
        $('#container').highcharts({
            chart: {
                type: 'heatmap',
                margin: [60, 10, 80, 50]
            },
            title: {
                text: 'commits: Month x Day',
                align: 'left',
                x: 40
            },

            subtitle: {
                text: 'Commits Distribution in last year',
                align: 'left',
                x: 40
            },

            xAxis: {
                type: 'category',
                tickPixelInterval: 50,
                categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                // min: Date.UTC(min_date[0], min_date[1], min_date[2]),
                // max: Date.UTC(max_date[0], max_date[1], max_date[2])
            },

            yAxis: {
              type: 'category',
              title: {
                  text: null
              },
              labels: {
                  format: '{value}'
              },
              categories: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],
              reversed: true
            },

            colorAxis: {
                stops: [
                    [0, '#eee'],
                    [0.2, '#d6e685'],
                    [0.5, '#8cc665'],
                    [0.7, '#44a340'],
                    [1, '#1e6823']
                ],
                min: 0,
                max: commits_month_day.max,
                // startOnTick: false,
                // endOnTick: false,
                labels: {
                    format: '{value}'
                }
            },

            series: [{
                borderWidth: 0,
                nullColor: '#EFEFEF',
                // colsize: 24 * 36e5, // one day
                colsize: 1,
                tooltip: {
                    headerFormat: 'Commits<br/>',
                    pointFormat: '<b>{point.value}</b>'
                },
                data: commits_month_day.data
            }]

        });
        console.log('Rendered in ' + (new Date() - start) + ' ms');

    });
  </script>
</head>
<body>
  <%= column_chart @commit_week_day, library: {title: {text: 'Commit in days of week'}, xAxis: {title: {text: 'Days of Week'}}, yAxis: {title: {text: 'Commits'}}} %>

  <hr>

  <%= scatter_chart @issues_info, library: {title: {text: 'Issues Resolution'}, xAxis: {title: {text: 'Issues(number)'}}, yAxis: {title: {text: 'time(days)'}},
    plotOptions: {
      scatter: {
                marker: {
                    radius: 5
                },
                tooltip: {
                    headerFormat: '<b>Issue {point.x}</b><br>',
                    pointFormat: '{point.y} days to be resolved'
                }
            }
    }
  } %>

  <hr>

  <div id="container"></div>

  <pre id="csv" style="display: none;">
    <%= @commits_month_day['data'] %>
  </pre>
  <hr>
  <div id="wordcloud" style="width:100%"><h3>Readme Word Cloud</h3></div>

</body>
<script>
  var frequency_list = <%= @readme_word_count.to_json %>

  var color = d3.scale.linear()
    .domain([0,1,2,3,4,5,6,10,15,20,100])
    .range(["#ddd", "#ccc", "#bbb", "#aaa", "#999", "#888", "#777", "#666", "#555", "#444", "#333", "#222"]);
  
  d3.layout.cloud().size([800, 300]) //width, height
    .words(frequency_list)
    .rotate(0)
    .fontSize(function(d) { return d.size*2; })
    .on("end", draw)
    .start();

  function draw(words) {
      d3.select("#wordcloud").append("svg")
        .attr("width", 850)
        .attr("height", 350)
        .attr("class", "wordcloud")
        .append("g")
        // without the transform, words words would get cutoff to the left and top, they would
        // appear outside of the SVG area
        .attr("transform", "translate(320,100)")
        .selectAll("text")
        .data(words)
        .enter().append("text")
        .style("font-size", function(d) { return d.size + "px"; })
        .style("fill", function(d, i) { return color(i); })
        .attr("transform", function(d) {
            return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
        })
        .text(function(d) { return d.text; });
  }

</script>
</html>